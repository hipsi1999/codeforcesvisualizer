{"version":3,"sources":["Components/Sidebar.js","Components/Main.js","Components/IsLoading.js","Components/ContestInfo.js","Components/ProblemInfo.js","Components/Home.js","Components/Suggestion.js","Components/About.js","Components/WrongUser.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","this","props","expand","ListItem","button","onClick","event","changeView","ListItemText","List","op","Component","Main","handleChange","handleSubmit","Jumbotron","className","Container","Row","Col","Form","onSubmit","FormGroup","Input","type","onChange","Button","IsLoading","CircularProgress","ContestInfo","state","cidata","user","username","fetch","then","response","json","jsonData","setState","JSON","stringify","catch","error","console","data","TableRow","TableCell","size","contestId","contestName","rank","oldRating","newRating","obj","parse","result","len","length","maxUp","maxDown","bestRank","worstRank","worstContest","bestContest","map","d","change","avglast5","i","avglast10","toFixed","reverse","style","overflowY","Table","borderRadius","TableBody","align","maxHeight","stickyHeader","TableHead","show","ProblemInfo","pidata","name","log","array","ratings","language","lowestdate","highestdate","indexes","tags","solved","Map","t","Date","s","problem","index","has","verdict","set","rating","programmingLanguage","tag","setSeconds","creationTimeSeconds","date","getDate","month","getMonth","tt","getFullYear","dataset","labels","datasets","barPercentage","barThickness","maxBarThickness","minBarLength","backgroundColor","key","push","dataset2","dataset3","randomColor","dataset4","startdate","enddate","startyear","endyear","iota","sy","tmp","ey","heatmap","count","height","options","responsive","maintainAspectRatio","legend","position","boxWidth","fontSize","padding","usePointStyle","pointStyle","overflow","Object","keys","keyName","keyIndex","display","e","startDate","endDate","values","showOutofRangeDay","classForValue","value","Home","cfdata","link","status","gotUserinfo","data2","imagelink","avatar","view","tried","avg","curView","noUser","component","Paper","handle","maxRank","maxRating","src","alt","width","wrongUser","Suggestion","author","body","axios","post","res","handleChangeSug","target","handleChangeName","suggestions","bind","get","SuggestionContainer","suggestion","borderBottom","marginBottom","maxWidth","Label","About","href","textDecoration","color","WrongUser","App","gotUsername","gotUser","preventDefault","val","main","Grid","container","item","xs","md","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c7fcbc6e.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport { List, ListItem, ListItemText } from '@material-ui/core';\r\n\r\n\r\n\r\nclass Sidebar extends Component{\r\n    \r\n    op(){\r\n       if(this.props.expand){\r\n           return(\r\n                <>\r\n                <ListItem button onClick={(event)=>{this.props.changeView(event,1)}}>\r\n                    <ListItemText>Home</ListItemText>\r\n                </ListItem>\r\n                <ListItem button onClick={(event)=>{this.props.changeView(event,11)}}>\r\n                    <ListItemText>Problem Info</ListItemText>\r\n                </ListItem>\r\n                <ListItem button onClick={(event)=>{this.props.changeView(event,12)}}>\r\n                    <ListItemText>Contest Info</ListItemText>\r\n                </ListItem>\r\n                <ListItem button onClick={(event)=>{this.props.changeView(event,0)}}>\r\n                    <ListItemText>Back</ListItemText>\r\n                </ListItem> \r\n                </>\r\n           )\r\n       }\r\n       else{\r\n           return(\r\n               <>\r\n            <ListItem button onClick={(event)=>{this.props.changeView(event,0)}}>\r\n                <ListItemText>Home</ListItemText>\r\n            </ListItem>\r\n            <ListItem button onClick={(event)=>{this.props.changeView(event,2)}}>\r\n                <ListItemText>Suggestions</ListItemText>\r\n            </ListItem>\r\n            <ListItem button onClick={(event)=>{this.props.changeView(event,3)}}>\r\n                <ListItemText>About</ListItemText>\r\n            </ListItem>\r\n            </>\r\n           )\r\n       } \r\n    }\r\n    render(){\r\n        return (\r\n            <List>\r\n                {this.op()}\r\n            </List>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React,{ Component } from 'react';\r\nimport { Container, Row, Col, Jumbotron } from 'reactstrap';\r\nimport { Form, FormGroup, Input, Button } from 'reactstrap';\r\n\r\nclass Main extends Component{\r\n    render(){\r\n        const { handleChange, handleSubmit } = this.props;\r\n        return (\r\n            <>\r\n                <Jumbotron className=\"text-center text-info\">\r\n                    <h2>Welcome to Codeforces Analyzer</h2>\r\n                </Jumbotron>\r\n                <Jumbotron>\r\n                    <Container className=\"text-center\">\r\n                            <Row className=\"text-center justify-content-center\">Enter your username:</Row>\r\n                            <br/>\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col className=\"col-6\">\r\n                                    <Form onSubmit={handleSubmit}>\r\n                                        <FormGroup>\r\n                                            <Input type=\"text\" onChange={handleChange}/>\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"text-center\">\r\n                                            <Button className=\"bg-info\">Enter</Button>\r\n                                        </FormGroup>\r\n                                    </Form>\r\n                                </Col>\r\n                            </Row>\r\n                        \r\n                    </Container>\r\n                </Jumbotron>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Main;","import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nfunction IsLoading(){\r\n    return(\r\n        <>\r\n            <div className=\"justify-content-center text-center\">\r\n                <CircularProgress/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default IsLoading;","import React, {Component} from 'react';\r\nimport { Container, Row, Col, Jumbotron } from 'reactstrap';\r\nimport { Table, TableBody, TableRow, TableCell, TableHead } from '@material-ui/core';\r\nimport IsLoading from './IsLoading';\r\nimport '../App.css';\r\n\r\nclass ContestInfo extends Component{\r\n    state={\r\n        cidata:null,\r\n    }\r\n    componentDidMount(){\r\n        const user=this.props.username;\r\n        const link='https://codeforces.com/api/user.rating?handle='+user;\r\n        fetch(link).then((response) => response.json())\r\n        .then((jsonData) => {\r\n            this.setState({\r\n                cidata:JSON.stringify(jsonData)\r\n            })\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        })\r\n    }\r\n    show(data){\r\n        return(\r\n            <>\r\n            <TableRow>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.contestId}</TableCell>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.contestName}</TableCell>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.rank}</TableCell>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.oldRating}</TableCell>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.newRating}</TableCell>\r\n                <TableCell size=\"small\" className=\"text-center bg-dark text-white\">{data.newRating-data.oldRating}</TableCell>\r\n            </TableRow>\r\n            </>\r\n        )\r\n    }\r\n    render(){\r\n        const data=this.state.cidata;\r\n        if(data===null){\r\n            return (\r\n                <IsLoading/>\r\n            )\r\n        }\r\n        else{\r\n            var obj=JSON.parse(data).result;\r\n            var len=obj.length;\r\n            var maxUp=0;\r\n            var maxDown=5000;\r\n            var bestRank=200000;\r\n            var worstRank=0;\r\n            var worstContest=\"-\";\r\n            var bestContest=\"-\";\r\n            obj.map((d)=>{\r\n                let change=d.newRating-d.oldRating;\r\n                if(change>maxUp){\r\n                    maxUp=change;\r\n                    bestContest=d.contestName;\r\n                }\r\n                if(change<maxDown){\r\n                    maxDown=change;\r\n                    worstContest=d.contestName;\r\n                }\r\n                if(d.rank>worstRank)\r\n                    worstRank=d.rank;\r\n                if(d.rank<bestRank)\r\n                    bestRank=d.rank;\r\n                return null;\r\n            })\r\n            var avglast5=0;\r\n            if(len<5){\r\n                avglast5=\"Less than 5 contest given\";\r\n            }\r\n            else{\r\n                for(var i=0;i<5;i++){\r\n                    avglast5+=obj[i].rank;\r\n                }\r\n                avglast5/=5;\r\n            }\r\n            var avglast10=0;\r\n            if(len<10){\r\n                avglast5=\"Less than 10 contest given\";\r\n            }\r\n            else{\r\n                for(i=0;i<10;i++){\r\n                    avglast10+=obj[i].rank;\r\n                }\r\n                avglast10/=10;\r\n            }\r\n            avglast5=avglast5.toFixed(2);\r\n            avglast10=avglast10.toFixed(2);\r\n            obj.reverse();\r\n            return(\r\n                <Jumbotron className=\"text-center\">\r\n                    <Container className=\"noscroll\" style={{overflowY:\"scroll\"}}>\r\n                        <Row className=\"justify-content-center\">\r\n                            <Col className=\"col-lg-8 col-md-10\">\r\n                                <Table style={{borderRadius:\"10%\"}}>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\" className=\"text-white bg-info\">Number of contests </TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{len}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Best Rank</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{bestRank}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Worst Rank</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{worstRank}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Maximum Change</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{maxUp}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Minimum Change</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{maxDown}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Best Contest</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{bestContest}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Worst Contest</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{worstContest}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Avg last 5 contests rank</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{avglast5}</TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell size=\"medium\" align=\"left\"  className=\"text-white bg-info\">Avg last 10 contests rank</TableCell>\r\n                                            <TableCell size=\"medium\" align=\"right\" className=\"text-white bg-dark\">{avglast10}</TableCell>\r\n                                        </TableRow>\r\n\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <h5>Rating Changes</h5>\r\n                    <Container className=\"noscroll p-0\" style={{maxHeight:\"90%\",overflowY:\"auto\"}}>\r\n                        <Row>\r\n                            <Table stickyHeader>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">Contest Id</TableCell>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">Name</TableCell>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">Rank</TableCell>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">Old Rating</TableCell>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">New Rating</TableCell>\r\n                                        <TableCell size=\"medium\" align=\"center\" className=\"bg-info text-white\">Change</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {obj.map(data=>this.show(data))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Row>\r\n                    </Container>\r\n                </Jumbotron>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default ContestInfo;","import React, {Component} from 'react';\r\nimport { Bar, Pie } from 'react-chartjs-2';\r\nimport { Jumbotron, Row, Col, Container } from 'reactstrap';\r\nimport { Table, TableBody, TableHead, TableRow, TableCell } from '@material-ui/core';\r\nimport { randomColor } from 'randomcolor';\r\nimport IsLoading from './IsLoading';\r\nimport \"../App.css\";\r\nimport CalendarHeatmap from 'react-calendar-heatmap';\r\nimport 'react-calendar-heatmap/dist/styles.css';\r\n\r\nclass ProblemInfo extends Component{\r\n    state={\r\n        pidata:null,\r\n    }\r\n    componentDidMount(){\r\n        var name=this.props.username;\r\n        var link=\"https://codeforces.com/api/user.status?handle=\"+name;\r\n        fetch((link)).then((response)=>response.json())\r\n        .then((jsonData)=>{\r\n            this.setState({\r\n                pidata:JSON.stringify(jsonData)\r\n            })\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        })\r\n    }\r\n    render(){\r\n        var data=this.state.pidata;\r\n        if(data===null){\r\n            return (\r\n                <IsLoading/>\r\n            )\r\n        }\r\n        else{\r\n            var d=JSON.parse(data);\r\n            var array=d.result;\r\n            var ratings={};\r\n            var language={};\r\n            var op={};\r\n            let lowestdate=null;\r\n            let highestdate=null;\r\n            var indexes={\r\n                'A':0,\r\n                'B':0,\r\n                'C':0,\r\n                'D':0,\r\n                'E':0,\r\n                'F':0,\r\n                'G':0\r\n            };\r\n            var tags={}\r\n            var tried = new Map();\r\n            var solved = new Map();\r\n            array.map((data)=>{\r\n                var t=new Date(1970,0,1);\r\n                var s=data.problem.contestId+data.problem.index;\r\n                console.log(data.problem);\r\n                if(!solved.has(s) && data.verdict===\"OK\"){\r\n                    solved.set(s,1);\r\n                    console.log(s);\r\n                    ratings[data.problem.rating]=ratings[data.problem.rating]?ratings[data.problem.rating]+1:1;\r\n                    indexes[data.problem.index[0]]=indexes[data.problem.index[0]]?indexes[data.problem.index[0]]+1:1;\r\n                    language[data.programmingLanguage]=language[data.programmingLanguage]?language[data.programmingLanguage]+1:1;\r\n                    data.problem.tags.map((tag)=>{\r\n                        tags[tag]=tags[tag]?tags[tag]+1:1;\r\n                        return null\r\n                    })\r\n                }\r\n                t.setSeconds(data.creationTimeSeconds);\r\n                if(lowestdate==null){\r\n                    lowestdate=data.creationTimeSeconds;\r\n                }\r\n                else if(lowestdate>data.creationTimeSeconds){\r\n                    lowestdate=data.creationTimeSeconds;\r\n                }\r\n                if(highestdate==null){\r\n                    highestdate=data.creationTimeSeconds;\r\n                }\r\n                else if(highestdate<data.creationTimeSeconds){\r\n                    highestdate=data.creationTimeSeconds;\r\n                }\r\n                let date=t.getDate();\r\n                let month=t.getMonth()+1;\r\n                let year=t.getFullYear();\r\n                let tt=year+'-'+month+'-'+date;\r\n                op[tt]=op[tt]?op[tt]+1:1;\r\n                return null;\r\n            })\r\n            var dataset={\r\n                labels:[],\r\n                datasets:[{\r\n                    barPercentage: 0.5,\r\n                    barThickness: 12,\r\n                    maxBarThickness: 20,\r\n                    minBarLength: 2,\r\n                    data:[],\r\n                    backgroundColor:[]\r\n                }]\r\n            }\r\n            for(var key in ratings){\r\n                if(key!=='undefined'){\r\n                    dataset.labels.push(key);\r\n                    dataset.datasets[0].data.push(ratings[key]);\r\n                    dataset.datasets[0].backgroundColor.push('#5bc0de');\r\n                }\r\n            }\r\n            var dataset2={\r\n                labels:[],\r\n                datasets:[{\r\n                    barPercentage: 0.5,\r\n                    barThickness: 12,\r\n                    maxBarThickness: 20,\r\n                    minBarLength: 2,\r\n                    data:[],\r\n                    backgroundColor:[]\r\n                }]\r\n            }\r\n            for(key in indexes){\r\n                dataset2.labels.push(key);\r\n                dataset2.datasets[0].data.push(indexes[key]);\r\n                dataset2.datasets[0].backgroundColor.push('#5bc0de');\r\n            }\r\n            var dataset3={\r\n                labels:[],\r\n                datasets:[{\r\n                    data:[],\r\n                    backgroundColor:[]\r\n                }]\r\n            }\r\n            for(key in tags){\r\n                dataset3.labels.push(key);\r\n                dataset3.datasets[0].data.push(tags[key]);\r\n                dataset3.datasets[0].backgroundColor.push(randomColor());\r\n            }\r\n            var dataset4={\r\n                labels:[],\r\n                datasets:[{\r\n                    data:[],\r\n                    backgroundColor:[]\r\n                }]\r\n            }\r\n            for(key in language){\r\n                dataset4.labels.push(key);\r\n                dataset4.datasets[0].data.push(language[key]);\r\n                dataset4.datasets[0].backgroundColor.push(randomColor());\r\n            }\r\n            let startdate=new Date(1970,0,1);\r\n            let enddate=new Date(1970,0,1);\r\n            startdate.setSeconds(lowestdate);\r\n            enddate.setSeconds(highestdate);\r\n            var startyear=[]\r\n            var endyear=[]\r\n            var iota=[]\r\n            var sy=startdate.getFullYear();\r\n            var tmp=sy;\r\n            var ey=enddate.getFullYear();\r\n            var i=0;\r\n            while(1){\r\n                startyear.push(sy);\r\n                endyear.push(tmp);\r\n                iota.push(i);\r\n                if(ey===tmp)\r\n                    break;\r\n                sy++;\r\n                tmp++;\r\n                i++;\r\n            }\r\n            var heatmap=[];\r\n            for(key in op){\r\n                heatmap.push({\r\n                    date:key,\r\n                    count:op[key]\r\n                })\r\n            }\r\n            return(\r\n                <>\r\n                <Jumbotron className=\"text-center\">\r\n                    <h5>Language Used:</h5>\r\n                    <Row className=\"justify-content-center\"> \r\n                        <Col className=\"col-md-12 col-sm-12 mt-5\" style={{height:\"500px\"}}>\r\n                            <Pie\r\n                                    data={{\r\n                                        labels:dataset4.labels,\r\n                                        datasets:dataset4.datasets\r\n                                    }}\r\n                                    options={{\r\n                                        responsive:true,\r\n                                        maintainAspectRatio:false,\r\n                                        legend:{\r\n                                            align:'start',\r\n                                            position:'right',\r\n                                            labels:{\r\n                                                boxWidth:10,\r\n                                                fontSize:12,\r\n                                                padding:5,\r\n                                                usePointStyle:true,\r\n                                                pointStyle:\"circle\"\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                />\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <h5>Tags solved:</h5>\r\n                    <br/>\r\n                    <Row className=\"justify-content-center\">\r\n                    <br/>    \r\n                        <Col className=\"col-md-8 col-sm-8 noscroll\" style={{maxHeight:\"400px\",overflow:\"scroll\"}}>\r\n                            <Table stickyHeader>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell size=\"small\" className=\"bg-info text-white\">Tags</TableCell>\r\n                                        <TableCell size=\"small\" className=\"bg-info text-white\">Questions</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        Object.keys(tags).map(function(keyName, keyIndex){\r\n                                            return(\r\n                                                <>\r\n                                                    <TableRow className=\"bg-dark\">\r\n                                                        <TableCell size=\"small\" className=\"text-white\">{keyName}</TableCell>\r\n                                                        <TableCell size=\"small\" className=\"text-white\">{tags[keyName]}</TableCell>\r\n                                                    </TableRow>\r\n                                                </>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <h5>Rating Based Questions Solved:</h5>\r\n                    <br/>\r\n                    <Row className=\"text-center justify-content-center noscroll\">\r\n                    <br/>\r\n                        <div className=\"canva noscroll\" style={{overflow:'scroll'}}>\r\n                            <Bar\r\n                                data={{\r\n                                    labels:dataset.labels,\r\n                                    datasets:dataset.datasets\r\n                                }}\r\n                                options={{\r\n                                \r\n                                    maintainAspectRatio:false,\r\n                                    responsive:true,\r\n                                    legend:{\r\n                                        display:false\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Row>\r\n                    <br/>\r\n                    <br/>\r\n                    <h5>Indexing Based Qustions Solved:</h5>\r\n                    <br/>\r\n                    <Row className=\"text-center justify-content-center noscroll\">\r\n                    <br/>\r\n                        <div className=\"canva noscroll\" style={{overflow:\"scroll\"}}>\r\n                            <Bar \r\n                                data={{\r\n                                    labels:dataset2.labels,\r\n                                    datasets:dataset2.datasets\r\n                                }}\r\n                                \r\n                                options={{\r\n                                    maintainAspectRatio:false,\r\n                                    responsive:true,\r\n                                    legend:{\r\n                                        display:false\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </div>\r\n                </Row>\r\n                <br/>\r\n                <br/>\r\n                <h5>Tags solved:</h5>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col className=\"col-md-12 col-sm-12 mt-5\" style={{height:\"500px\"}}>\r\n                        <Pie\r\n                            data={{\r\n                                labels:dataset3.labels,\r\n                                datasets:dataset3.datasets\r\n                                }}\r\n                            options={{\r\n                                responsive:true,\r\n                                maintainAspectRatio:false,\r\n                                legend:{\r\n                                    align:'start',\r\n                                    position:'right',\r\n                                    labels:{\r\n                                        boxWidth:10,\r\n                                        fontSize:10,\r\n                                        padding:5,\r\n                                        usePointStyle:true,\r\n                                        pointStyle:\"circle\"\r\n                                    }\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <br/>\r\n                </Jumbotron>\r\n                <Jumbotron className=\"text-center justify-content-center\">\r\n                        <h5>Submission Heatmap</h5>\r\n                        <br/>\r\n                        {iota.map(function(i){\r\n                            var s=startyear[i]+\"-01-01\";\r\n                            var e=endyear[i]+\"-12-31\";\r\n                            return(\r\n                            <>\r\n                            <Container className=\"bg-white p-3  noscroll\" style={{overflow:'auto'}}>\r\n                                <h6>{startyear[i]}</h6>\r\n                                <CalendarHeatmap\r\n                                startDate={s}\r\n                                endDate={e}\r\n                                values={\r\n                                    heatmap\r\n                                }\r\n                                showOutofRangeDay={false}\r\n                                \r\n                                classForValue={(value) => {\r\n                                    if (!value) {\r\n                                        return 'color-empty';\r\n                                    }\r\n                                    else if(value.count>0 && value.count<=5){\r\n                                        return `color-scale-1`;\r\n                                    }\r\n                                    else if(value.count>5 && value.count<=15){\r\n                                        return `color-scale-2`;\r\n                                    }\r\n                                    else if(value.count>15 && value.count<=30){\r\n                                        return `color-scale-3`;\r\n                                    }   \r\n                                    else{\r\n                                        return `color-scale-4`;\r\n                                    }\r\n                                }}\r\n                                />\r\n                            </Container>\r\n                            <br/>\r\n                            <br/>\r\n                            </>)\r\n                        })}     \r\n                </Jumbotron>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default ProblemInfo;","import React,{ Component } from 'react';\r\nimport { Col, Row, Jumbotron, Container } from 'reactstrap';\r\nimport ContestInfo from './ContestInfo';\r\nimport IsLoading from './IsLoading';\r\nimport ProblemInfo from './ProblemInfo';\r\nimport { Table, TableBody, TableCell, Paper, TableRow } from '@material-ui/core';\r\n \r\nclass Home extends Component{\r\n    state={\r\n        cfdata:null,\r\n        pidata:null\r\n    }\r\n    componentDidMount(){\r\n        const user=this.props.username;\r\n        var link ='https://codeforces.com/api/user.info?handles='+user;\r\n        fetch(link).then((response) => response.json())\r\n        .then((jsonData) => {\r\n            if(jsonData.status===\"OK\"){\r\n                this.props.gotUserinfo();\r\n            }\r\n            this.setState({\r\n                cfdata:jsonData\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            console.error(error)\r\n        })\r\n        link=\"https://codeforces.com/api/user.status?handle=\"+user;\r\n        fetch(link).then((response) => response.json())\r\n        .then((jsonData) => {\r\n            this.setState({\r\n                pidata:JSON.stringify(jsonData)\r\n            })\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    render(){\r\n        const data=this.state.cfdata;\r\n        const data2=this.state.pidata;\r\n        if(data===null || data2===null){\r\n            return(\r\n                <>\r\n                    <div className=\"mt-5\">\r\n                        <IsLoading/>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n        else{\r\n            if(data.status===\"OK\"){\r\n                const imagelink=\"http://\"+data.result[0].avatar;\r\n                var view=null;   \r\n                var tried=new Map();\r\n                var solved=new Map();\r\n                const pidata=JSON.parse(data2);\r\n                var array=pidata.result;\r\n                array.map((data)=>{\r\n                    let s=data.problem.contestId+data.problem.index;\r\n                    if(!tried.has(s))\r\n                        tried.set(s,1);\r\n                    if(!solved.has(s) && data.verdict===\"OK\"){\r\n                        solved.set(s,1);\r\n                    }\r\n                    return null\r\n                })\r\n                var avg=array.length;\r\n                var solvedCount=solved.size;\r\n                avg/=solvedCount;\r\n                avg=avg.toFixed(2);\r\n                switch(this.props.curView){\r\n                    case 1:\r\n                        view=<>\r\n                            <Jumbotron>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col className=\"col-md-8\">\r\n                                        <Table>\r\n                                            <TableBody>\r\n                                                <TableRow>\r\n                                                    <TableCell className=\"bg-info text-white\">Tried </TableCell>\r\n                                                    <TableCell className=\"bg-info text-white\">{tried.size}</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell className=\"bg-info text-white\">Solved </TableCell>\r\n                                                    <TableCell className=\"bg-info text-white\">{solved.size}</TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell className=\"bg-info text-white\">Average attemps </TableCell>\r\n                                                    <TableCell className=\"bg-info text-white\">{avg}</TableCell>\r\n                                                </TableRow>\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Jumbotron>\r\n                        </> \r\n                        break\r\n                    case 11:\r\n                        view=\r\n                            <ProblemInfo username={this.props.username}/>\r\n                            break\r\n                    case 12:\r\n                        view=\r\n                            <ContestInfo username={this.props.username}/>\r\n                            break\r\n                    case 0:\r\n                        this.props.noUser();\r\n                        break\r\n                    default:\r\n                        view=<></>\r\n                }\r\n                return(\r\n                    <>\r\n                    <div className=\"bg-info\" >\r\n                    <Container className=\"bg-info\">\r\n                        <Jumbotron className=\"justify-content-center bg-info\">\r\n                            <Row>\r\n                                <Col className=\"col-6\">\r\n                                    <Table component={Paper}>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell size=\"small\" className=\"text-white bg-dark\">Handle</TableCell>\r\n                                                <TableCell size=\"small\">{data.result[0].handle}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell size=\"small\" className=\"text-white bg-dark\">Rank</TableCell>\r\n                                                <TableCell size=\"small\">{data.result[0].rank}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell size=\"small\" className=\"text-white bg-dark\">Max Rank</TableCell>\r\n                                                <TableCell size=\"small\">{data.result[0].maxRank}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell size=\"small\" className=\"text-white bg-dark\">Rating</TableCell>\r\n                                                <TableCell size=\"small\">{data.result[0].rating}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell size=\"small\" className=\"text-white bg-dark\">Max Rating</TableCell>\r\n                                                <TableCell size=\"small\">{data.result[0].maxRating}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>   \r\n                                </Col>\r\n                                <Col className=\"col-6 text-center align-self-center\">\r\n                                    <img src={imagelink} alt=\"user-image\" height=\"150\" width=\"150\"/>\r\n                                </Col>\r\n                            </Row>\r\n                        </Jumbotron>\r\n                    </Container>\r\n                    </div>\r\n                    <div className=\"\">\r\n                        {view}\r\n                    </div>\r\n                    </>\r\n                )\r\n            }\r\n            else{\r\n                this.props.wrongUser();\r\n                this.props.noUser();\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport { Jumbotron, Container, Form, FormGroup, Input, Button, Label } from 'reactstrap';\r\nimport IsLoading from './IsLoading';\r\n\r\nclass Suggestion extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            author:'',\r\n            body:'',\r\n            suggestions:null\r\n        }\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeSug = this.handleChangeSug.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        axios.get('/suggestions')\r\n        .then(res=>{\r\n            this.setState({\r\n                suggestions:JSON.stringify(res)\r\n            })\r\n        })\r\n    }\r\n    handleSubmit = (event) => {\r\n        // event.preventDefault();\r\n        const { author, body } = this.state;\r\n        const data = {\r\n            author: author,\r\n            body: body\r\n        }\r\n        axios.post('/suggestions',data)\r\n        .then(res=>{\r\n            console.log(res)\r\n        })\r\n    }\r\n    handleChangeSug = (event) => {\r\n        this.setState({\r\n            body:event.target.value\r\n        })\r\n    }\r\n    handleChangeName = (event) => {\r\n        this.setState({\r\n            author:event.target.value\r\n        })\r\n    }\r\n    render(){\r\n        let SuggestionContainer;\r\n        if(this.state.suggestions === null){\r\n            SuggestionContainer = \r\n            <>\r\n                <br/>\r\n                <IsLoading/>\r\n            </>\r\n        }\r\n        else{\r\n            const suggestions = JSON.parse(this.state.suggestions)\r\n            SuggestionContainer =\r\n                suggestions.data.map(suggestion=>(\r\n                    <div style={{padding:\"10px\",borderBottom:\"1px solid black\"}}>\r\n                        <p style={{marginBottom:\"0px\"}}><span className=\"font-weight-bold\">{suggestion.author}</span><span className=\"font-weight-light\" style={{fontSize:\"12px\"}}>{\" \"}{\" \"}{\" \"}({suggestion.date})</span></p>\r\n                        <p style={{marginBottom:\"0px\"}}>{suggestion.body}</p>\r\n                    </div>             \r\n                ))\r\n            \r\n        }\r\n        return(\r\n            <>\r\n                <Jumbotron className=\"mb-0\">\r\n                    <Container style={{maxWidth:\"600px\"}}>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label>Name</Label>\r\n                                <Input type=\"text\" size=\"sm\" onChange={this.handleChangeName}/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Suggestion</Label>\r\n                                <Input type=\"textarea\" size=\"sm\" onChange={this.handleChangeSug}/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button>Send</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Container>\r\n                </Jumbotron>\r\n                <Jumbotron>\r\n                    <Container>\r\n                        <div className=\"text-info text-center pb-2\" style={{borderBottom:\"1px solid black\"}}>\r\n                            <h4>Suggestions</h4>\r\n                        </div>\r\n                        {SuggestionContainer}\r\n                    </Container>\r\n                </Jumbotron>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Suggestion;","import React from 'react';\r\nimport { Container, Jumbotron, Button } from 'reactstrap';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nfunction About(){\r\n    return(\r\n        <>\r\n            <Jumbotron>\r\n                <div className=\"justify-content-center text-center mt-5\">\r\n                    <h3>Made by Hipranshu</h3>\r\n                </div>  \r\n                <Container className=\"text-center\">\r\n                    This is made by me to help you in any way it can<br/>\r\n                    There is no compare between users feature since I dont like it! Maybe in future :-) <br/>\r\n                    Feel free to put up ur suggestions in the Suggestions page<br/>\r\n                    Connect to me if you want to do some web project or microservices project with me :-) <br/>\r\n                </Container>  \r\n            </Jumbotron>\r\n            <Jumbotron>\r\n                <div className=\"justify-content-center text-center\">\r\n                    <Button className=\"bg-info\"><a href=\"https://www.instagram.com/hipsi_ig/\" style={{textDecoration:'None',color:'white'}}><InstagramIcon/><span> Instagram</span></a></Button>\r\n                    <br/><br/>\r\n                    <Button className=\"bg-info\"><a href=\"https://www.linkedin.com/in/hipranshu-bargurjer-493160171/\" style={{textDecoration:'None',color:'white'}}><LinkedInIcon/><span> LinkedIn</span></a></Button>\r\n                </div>\r\n            </Jumbotron>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Container} from 'reactstrap';\r\nfunction WrongUser(){\r\n    return(\r\n        <>\r\n                <Container className=\"text-center text-danger\">\r\n                    Wrong Username or Server Busy!\r\n                </Container>\r\n        </>\r\n    )\r\n}\r\nexport default WrongUser;","import React,{ Component } from 'react';\nimport './App.css';\nimport Sidebar from './Components/Sidebar';\nimport Main from './Components/Main';\nimport Home from './Components/Home';\nimport Suggestion from './Components/Suggestion';\nimport About from './Components/About';\nimport WrongUser from './Components/WrongUser';\nimport { Grid } from '@material-ui/core';\n\nclass App extends Component {\n  state={\n    username:'',\n    gotUsername:false,\n    gotUser:false,\n    curView:0,\n    wrongUser:false,\n  }\n  handleChange = (event) => {\n    this.setState({\n      username:event.target.value\n    });\n  }\n  handleSubmit = (event) => {\n    const name=this.state.username;\n    this.setState({\n        username:name,\n        gotUsername:true,\n    })\n    event.preventDefault();\n  }\n  noUser = () => {\n    this.setState({\n      username:'',\n      gotUsername:false,\n      gotUser:false,\n    })\n  }\n  gotUserinfo = (op) =>{\n    this.setState({\n      gotUser:true,\n      curView:1\n    })\n  }\n  changeView = (event,val) =>{\n    this.setState({\n      curView: val,\n    })\n  }\n  wrongUser = () =>{\n    this.setState({\n      wrongUser:true,\n    })\n  }\n  render(){\n    const { username, gotUsername} = this.state;\n    let main=null;\n    let wrongUser=null;\n    if(gotUsername){\n          main= \n          <>\n            <Home username={username} noUser={this.noUser} gotUserinfo={this.gotUserinfo} curView={this.state.curView} wrongUser={this.wrongUser}/>\n          </>\n    }\n    else{\n      if(this.state.wrongUser)\n        wrongUser=<WrongUser/>\n      else\n        wrongUser=<></>\n      switch(this.state.curView){\n        case 0:\n          main= <>\n            <Main username={username}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n            />\n            {wrongUser}\n          </>\n          break\n        case 2:\n          main= <>\n            <Suggestion/>\n          </>\n          break\n        case 3:\n          main= <>\n            <About/>\n          </>\n          break\n        default:\n          main = <></>\n      }\n    }\n    return(\n      <Grid container className=\"noscroll\" >\n        <Grid item xs={3} md={2} p={0}>\n          <Sidebar expand={this.state.gotUser} changeView={this.changeView}/>\n        </Grid>\n        <Grid item xs={9} md={10} style={{backgroundColor:\"#e9ecef\",height:\"100vh\",overflow:\"scroll\"}} className=\"noscroll\">\n          {main}    \n        </Grid>\n      </Grid>\n    );\n  };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}